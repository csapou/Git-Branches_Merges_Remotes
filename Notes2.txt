####LinkedIn course Kevin Skogland
### 1. Navigate the Commit tree
## Reference commits
#Tree-ish A directory containing files and other directories (which Git calls "trees")
  #or any identifier which references a tree
#A commit is considered tree-ish because it refers to a tree at the point when a
  #commit has been applied
#A tree-ish is a directory, a commit or a reference
  #SHA-1 hash, HEAD pointer ref, branch ref, tag ref, ancestry
#HEAD pointer .git/HEAD usually say go look .git/refs/heads/master
git show HEAD
git show e523ace1eac
## Ancestry
#Get the parent of this commits e523ace1eac that is also the HEAD
e523ace1eac^
HEAD^
master^
#or
HEAD~1, HEAD~ #same as git show HEAD^
#Grandparent
e523ace1eac^^
HEAD^^
master^^
HEAD~2 #same as git show HEAD^^
#Great-Grandparent
e523ace1eac^^^
HEAD^^^
master^^^
HEAD~3 #same as git show HEAD~3
## Tree listings
git ls-tree <tree-ish>
git ls-tree HEAD #blobs are a file binary large object
git ls-tree HEAD^
git ls-tree HEAD assests/ #looking into a directory in assets
## Filter the commit log
git log
git log -3 #shows last 3 logs
git help log
git log -n 5 #The five most recent commits
git log --since=2019-01-01
git log --until=2019-01-01
git log --until="3 days ago"
git log --author="Casper" #Can just use part of name
git log --grep="Init" #searches in text
git log --grep="Bugfix"
git log --since=2019-03-01 --until=2019-03-31 --author="Karen" --grep="refactor" #example of long from quiz
git log --after=2.weeks --before=3.days
git log e523ace1eac..HEAD
#git ls-tree HEAD #Look at changes to a file or directory
git log explorers.html
git log assets
## Format the commit log
git log -p #p=patch same as changeset
git log --stat #statistics on changes
git log --format=medium #default
git log --format=short #does not provide date other format=oneline, full, fuller,
  #email, raw
git log --oneline
git log --graph #really cool when Branching
git log --graph --all --oneline --decorate
git help ls-tree

### 2. Branching
## Branching overview
## Create branches
git branch #shows branches
git branch new_feature #No spaces, can have underscores letters and numbers
cat .git/HEAD
ls -la .git/refs/heads/
cat .git/refs/heads/master #SHA
cat .git/refs/heads/new_feature #Points to same SHA right now
git log --oneline
## Switch branches
git checkout new_feature
cat .git/HEAD
#saves notes and now want to add to branch
git commit -am "Work on branch new_feature"
git log --oneline
git checkout master
## Create and swith branches
git checkout new_feature
git checkout -b new_feature_of_feature #Creates and switches in one go
git commit -am "Work on branch new_feature_of_feature"
## Switch branches with uncommitted changes
#Saves can now not checkout to master
#Switching with uncommitted changes: Cannot switch if changes in working directory
  #conflict, Can switch if changes in working directory could be applied without
  # conflict, Can switch if files are not being tracked. Options commit the changes
  #remove the changes (checkout the file again) or stash the changes
git commit -am "Commit then I can checkout" #can now switch to another Branch
## Compare branches
git diff master..new_feature
git diff new_feature..master #reversed changes, typically the oldest first
git diff --color-words master..new_feature
git diff master^..new_feature
git branch --merged
git branch --no-merged
## Rename branches
git help branch
git checkout new_feature
#In documentation you can rename a branch with -m meaning move
  #you can also rename a branch you are not on by adding the old name
git branch -m notes_add #do not rename if collaborating on the branches with others
## Delete branches
git branch branch_to_delete
git branch
git branch -d branch_to_delete #d stands for delete
git branch
#Can not delete a branch you are on
git checkout -b branch_to_delete
git branch -d branch_to_delete
#Can not if there are changes. Can run it with D if you are sure you want to delete the branch
## Configure command prompt
#Add current branch name to command prompt, similar to .git-completion.bash
#Have to download the script
__git_ps1 #Shows the branch you are working on, I think this is implemented

### 3. Reset branches
## Reset types
#Reset changes the files in the staging index and/or working directory to the
  #state they had when a specified commit was made
  #Moves HEAD pointer to a specific commit
#Types: soft, mixed and hard
#Soft: Moves HEAD pointer. Does not change staging index. Does not
  #change working directory
git reset --soft <tree-ish>
#Mixed (default): Moves HEAD pointer. Changes staging index to match repository. Does not
  #change working directory
git reset --mixed <tree-ish>
#Hard: Moves HEAD pointer. Changes staging index to match repository.
  #Changes working directory to match repository
git reset --hard <tree-ish>
## Soft reset
#Why return to an old state and leave code changes staged. Useful for
  #amending one or more commits. Similar to git commit --amend.
  #Previous commits will be discarded.
#can branch off another branch you are not on and move to that
git checkout -b reset_branch new_feature_of_feature
git commit -am "Commit A"
git commit -am "Commit B"
git reset --soft HEAD^ #not commit B but files are staged
git reset --soft accb32e4e #back can move back since no changes was started
git reset --soft HEAD^^
git status
git commit -am "Commit A and B"
git log #Commit A and Commit B are gone
## Mixed reset
#Useful for reorganizing commits
#Files are not staged after reset with --mixed
#Can for instance have changes to two files and want to stage and commit
  #Seperately
## Hard reset
#Useful to permanently undo commits. Previous commits and all changes will be discarded

### 4. Merge branches
## Merge code
#Go git checkout notes_add sees notes.txt is an old version but now I'm adding
  #some text to this and back to master
git diff master..notes_addgit
#git merge notes_add #HEAD is at master #Did not do
#Always have a clean working directory is essential when merging
## Fast-forward merge vs. true merge
#Above the tip of the master had not changed therefor it was easy to merge
  #Also called a fast-forward merge
#True merge when changes where also made to the master
  #Merge made by the 'recursive' strategy.
git commit -am "True merge"
#git merge notes_add
git log --graph --all --oneline --decorate
## Merge conflicts

## Resolve merge conflicts
#Three ways abort manually and with a merge tool
git merge --abort #to abort merge or
#Manually Solve conflicts git add and git commit without a message
git log --graph --all --oneline --decorate
#git reset hard can undo the merge use SHA back to not merged on master
#git help mergetool #does not work but there are many merge tools
#Presenter does not use these mergetools but a GUI
## Strategies to reduce conflicts
#Keep lines short
#Keep commits small and focused
#Beware stray edits to whitespace (spaces, tabs, line returns)
#Merge often still keeping the branch, feature flags, can also merge master into
  #the branch working on

### 5. Stash Changes
#Is a 4th area in git. Not part of the repository, staging index or working directory
## Save changes in the stash
#Made changes to a branch and want to checkout to another branch
  #Can't before the changes are committed or stashed
git stash save "Changes to ..."
#Can now checkout, does not stash unstaged files, so if a new file is created
  #is not stashed, but can git help stash -u or --include-untracked
## View stashed changes
git stash list #Can see what is stashed
git stash show stash@{0}
git stash show -p stash@{0} #to see changes p patch
#Can now checkout
## Retrieve stashed changes
git stash pop
git stash save "Changes to 5." #Stash again
git stash apply #Keeps the stash, can have conflicts just like merges
## Delete stashed changes
git stash list
git stash drop stash@{0}
git stash clear #removes all stashed
#Three ways to delete a stash these two and pop that popped it out again to work on

### 6. Set up a remote
git log --graph --all --oneline --decorate
## Local and remote repositories
#Local does not even need an internet connection
#origin/master and master on local computer, have to do a merge to get into our master
#a pull is called a fetch
#origin/master is in reality just a branch that tries to stay in sync with
  #the remote repository
#The process make your changes locally fetch the origin/master and merge
  #with the local changes and push back up to the remote server
## Set up a GitHub account
#The most popular git host
## Add a remote repository
##########################################################
###Had to do it by copying to hulk and do it from there###
###Copy right click from owntokens starts with ghp_#######
##########################################################
git remote #list of current remotes is empty
#Add github directory and gets "â€¦or push an existing repository from the command line"
git remote add origin https://github.com/csapou/Git-Branches_Merges_Remotes.git
#Not synced yet
git remote
git remote -v #Have both a fetch and push almost always the same at least for my purpose
cat .git/config #Can see the remote "origin"
#To remove a remote git remote rm origin can add it again with the above add command
## Create a remote branch
#git branch -M main #Does not have this in presentation, but is in GitHub,
  #changes name to main, changed it back
git push -u origin master
git branch -r #shows remote branches
git branch -a #shows all branches
ls -la .git/refs/remotes
ls -la .git/refs/remotes/origin/
ls -la .git/refs/remotes/origin/master/ #Contains a SHA
## Clone a remote repository
#Go to project clone or download provide url -> http...
git clone https... #will use the directory name at cloning
git clone https... other_version_of #Gives the directory another name
git branch -r #Here only one branch the master
## Track remote branches
#Tracking trying to keep them closely in sync
#-u with the push tracking the branch
cat .git/config
git help branch
git branch -u branchname #Same as -u --set-upstream-to= and specify upstream
git push origin other_branch
git branch --unset-upstream branchname
#Tracking is saving some typing, have to specify it, if it is a tracking branch
  #dont have to
git branch -u origin/non_tracking non_tracking #Now this branch is being tracked
git branch --unset-upstream non_tracking #Not being tracked

### 7. Collaborate with a remote
## Push changes to a remote repository 
git log --oneline -5 master #Our local branch
git log --oneline -5 origin/master #Tracking branch of the remote branch, not the actual remote branch 
git diff origin/master..master #No difference just pushed
#Changed Notes2 commit on hulk then
git diff origin/master..master #Now I can see the differences
git diff --color-words origin/master..master
git push #Because it is a tracking branch I don't have to write the long: git push origin master 
## Fetch changes from a remote repository
#git fetch to reposity, so does not merge anything into what you are working on
#git pull to working directory  
#Fetch often and as the first thing, 
#Fetch before you push
#Fetch before you go offline #These rules of cause only apply if you are collaborating with somebody 
	#otherwise it does not make sense 
##Merge in fetched changes
#Fast forward merge
git fetch + git merge (git pull) #When not have made any changes easier to do a git pull
	#When working using git fetch and compare and then maybe end of the day merge 
##Check out remote branches
#Can not checkout a remote branch otherwise the same 
git branch non_tracking origin/non_tracking #then have branch locally to work on
#Delete git branch -d non_tracking and now use checkout so also moving the HEAD to the new branch
git checkout -b non_tracking origin/non_tracking
##Push to an updated remote branch 
#fetch - merge - push
##Delete a remote branch
#Telling github to remove a branch
git push origin :non_tracking #If colon is removed it is the same as pushing, non intuitive but colon then deleting
	#if pushing can also do this non_tracking:non_tracking, when removing non_tracking in front it means
	#push nothing to non_tracking
#Other way to delete more intuituive but longer
git push origin --delete non_tracking
##Enable collaboration
#Add collaborators to a project github - settings - collaborators - add collaborator to project
	#They can read and write to that project
#Open source projects
	#Then you have to fork the project, but first what do you want to change and then check issues and pull 
	#request to see if anybody else is working on it.
	#If not then you can fork - pull - work on feature - push - pull request
##Collaboration workflow
#-My side
git checkout master
git fetch #Some work done,
git merge origin/master
#Work on feature
git checkout -b feedback_form
git add feedback.html
git commit -m "Add customer feedback form"
git fetch #no other have been added
git push -u origin feedback_form
#-Collaborator view
git checkout master
git fetch 
git merge origin/master
git checkout -b feedback_form origin/feedback_form #Need the new brach
git log
git show SHA 
#Open in browser, want to add 
git commit -am "Add ... "
git fetch
git push
#-My side
git fetch
git log -p feedback_form..origin/feedback_form #Take a look what she added
git merge origin/feedback_form
git checkout master
git fetch
git merge origin/master #If changes
git merge feedback_form #local have now
git push #Feature is now on the remote 



 

 

